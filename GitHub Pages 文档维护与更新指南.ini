GitHub Pages 文档维护与更新指南
确保您的文档网站 https://ladyicefox.github.io/autoexporttool-docs/ 保持最新状态，遵循以下详细维护流程：

日常更新维护流程
1. 准备工作（首次设置后只需一次）
bash
# 克隆仓库到本地（如果尚未克隆）
git clone https://github.com/ladyicefox/autoexporttool-docs.git
cd autoexporttool-docs

# 安装必要依赖
pip install mkdocs-material mkdocs-minify-plugin
2. 标准更新流程（每次修改文档）
bash
# 进入项目目录
cd autoexporttool-docs

# 拉取最新更改（多人协作时需要）
git pull origin main

# 修改文档内容（使用VS Code或其他编辑器）
code .  # 或手动编辑文件

# 本地预览更改
mkdocs serve
# 访问 http://localhost:8000 预览效果

# 添加所有更改
git add .

# 提交更改
git commit -m "更新文档：添加新功能说明"

# 推送到GitHub仓库
git push origin main

# 部署到GitHub Pages
mkdocs gh-deploy
不同修改类型的详细操作
1. 更新文本内容
编辑Markdown文件（.md）

保存更改

运行标准更新流程

2. 添加新页面
在 docs 目录下创建新Markdown文件（如 docs/advanced/new_feature.md）

在 mkdocs.yml 中添加导航条目：

yaml
nav:
  - 高级功能:
      - 自定义设置: advanced/customization.md
      - 工具栏集成: advanced/toolbar_integration.md
      - 脚本扩展: advanced/scripting.md
      - 新功能说明: advanced/new_feature.md  # 添加此行
运行标准更新流程

3. 更新图片/视频/GIF
将媒体文件放入对应目录：

图片：docs/images/

GIF：docs/gifs/

视频：docs/videos/

在Markdown文件中引用：

markdown
![描述文字](images/new_image.png)
运行标准更新流程

4. 修改网站配置
编辑 mkdocs.yml

常见配置项：

yaml
site_name: AutoExportTool Pro  # 网站标题
site_url: https://ladyicefox.github.io/autoexporttool-docs/  # 网站URL
theme:
  name: material  # 主题
  palette:  # 配色方案
    - scheme: default
      primary: indigo
plugins:
  - search  # 搜索插件
  - minify  # 压缩插件
运行标准更新流程

高级维护技巧
1. 多设备同步工作
bash
# 在新设备上首次设置
git clone https://github.com/ladyicefox/autoexporttool-docs.git
cd autoexporttool-docs
pip install mkdocs-material

# 后续更新
git pull origin main
mkdocs serve  # 预览
# 进行修改...
git add .
git commit -m "更新内容"
git push origin main
mkdocs gh-deploy
2. 版本回滚
bash
# 查看提交历史
git log --oneline
# 输出示例：
# a1b2c3d (HEAD -> main) 更新文档
# d4e5f6a 添加新功能说明
# g7h8i9j 初始提交

# 回滚到特定版本
git checkout d4e5f6a -- docs/  # 只回滚文档
# 或完全回滚
git reset --hard d4e5f6a

# 强制推送到GitHub
git push origin main --force

# 重新部署
mkdocs gh-deploy --force
3. 解决冲突（多人协作）
bash
# 拉取最新更改（可能产生冲突）
git pull origin main

# 如果有冲突，手动解决冲突文件
# 冲突标记示例：
# <<<<<<< HEAD
# 本地内容
# =======
# 远程内容
# >>>>>>> commit-hash

# 解决冲突后
git add .
git commit -m "解决合并冲突"
git push origin main
mkdocs gh-deploy
4. 自动化部署（推荐）
创建 .github/workflows/deploy.yml 文件：

yaml
name: Deploy Docs
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - run: pip install mkdocs-material
    - run: mkdocs gh-deploy --force
提交并推送此文件：

bash
git add .github/workflows/deploy.yml
git commit -m "添加自动部署工作流"
git push origin main
维护检查清单
每次更新后检查：

访问 https://ladyicefox.github.io/autoexporttool-docs/ 确认更新生效

检查所有链接是否有效：

bash
# 安装链接检查工具
pip install linkchecker

# 检查网站链接
linkchecker https://ladyicefox.github.io/autoexporttool-docs/
验证移动端显示效果（使用浏览器开发者工具）

确认搜索功能正常工作

常见问题解决
部署后未更新
bash
# 强制浏览器刷新缓存
Ctrl + F5 或 Ctrl + Shift + R

# 检查GitHub Actions状态
https://github.com/ladyicefox/autoexporttool-docs/actions
图片/资源未显示
检查文件路径是否正确（区分大小写）

确认文件已添加到Git：

bash
git status  # 查看未跟踪文件
git add docs/images/missing_file.png
git commit -m "添加缺失文件"
git push origin main
检查文件扩展名是否正确

部署错误
bash
# 查看详细错误信息
mkdocs gh-deploy --verbose

# 常见解决方法
mkdocs build --clean  # 清理构建
mkdocs gh-deploy --force  # 强制部署
最佳实践
定期维护：

bash
# 每月更新依赖
pip install --upgrade mkdocs-material
git add requirements.txt
git commit -m "更新依赖"
git push origin main
版本备份：

bash
# 创建版本快照
cp -r docs/ docs-$(date +%Y%m%d)/
git add docs-$(date +%Y%m%d)
git commit -m "创建文档快照 $(date +%Y-%m-%d)"
git push origin main
内容审核：

每次更新前本地预览：mkdocs serve

使用拼写检查工具

定期审查过时内容

通过遵循这些步骤，您的文档网站将始终保持最新状态。每次更新后，变更会在1-3分钟内自动发布到 https://ladyicefox.github.io/autoexporttool-docs/。